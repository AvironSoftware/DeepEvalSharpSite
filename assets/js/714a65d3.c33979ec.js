"use strict";(self.webpackChunkdocs_src=self.webpackChunkdocs_src||[]).push([[874],{7504:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>h,frontMatter:()=>o,metadata:()=>n,toc:()=>c});const n=JSON.parse('{"id":"metrics/PromptAlignmentMetric","title":"Prompt Alignment Metric","description":"The Prompt Alignment Metric evaluates whether an LLM-generated ActualOutput aligns with the instructions specified in your prompt template, using an LLM-as-a-judge, referenceless approach. It flags deviations and provides a reason for its score, making it a self-explaining LLM-Eval tool.","source":"@site/docs/metrics/PromptAlignmentMetric.md","sourceDirName":"metrics","slug":"/metrics/PromptAlignmentMetric","permalink":"/docs/metrics/PromptAlignmentMetric","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Match Metric","permalink":"/docs/metrics/MatchMetric"},"next":{"title":"Summarization Metric","permalink":"/docs/metrics/SummarizationMetric"}}');var i=r(4848),s=r(8453);const o={},a="Prompt Alignment Metric",l={},c=[{value:"When you should use Prompt Alignment Metric",id:"when-you-should-use-prompt-alignment-metric",level:4},{value:"When you SHOULDN&#39;T use Prompt Alignment Metric",id:"when-you-shouldnt-use-prompt-alignment-metric",level:4},{value:"How to use",id:"how-to-use",level:2},{value:"Required Data Fields",id:"required-data-fields",level:3},{value:"Required Configuration Parameters",id:"required-configuration-parameters",level:3},{value:"Optional Configuration Parameters",id:"optional-configuration-parameters",level:3}];function d(e){const t={code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.header,{children:(0,i.jsx)(t.h1,{id:"prompt-alignment-metric",children:"Prompt Alignment Metric"})}),"\n",(0,i.jsxs)(t.p,{children:["The Prompt Alignment Metric evaluates whether an LLM-generated ",(0,i.jsx)(t.code,{children:"ActualOutput"})," aligns with the instructions specified in your prompt template, using an LLM-as-a-judge, referenceless approach. It flags deviations and provides a reason for its score, making it a self-explaining LLM-Eval tool."]}),"\n",(0,i.jsx)(t.h4,{id:"when-you-should-use-prompt-alignment-metric",children:"When you should use Prompt Alignment Metric"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Ensuring Instruction Adherence"})," \u2013 Use this metric to verify that responses follow the explicit instructions in your prompt template."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Validating Prompt Template Changes"})," \u2013 Check that updates to prompt instructions yield properly aligned outputs."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Benchmarking Models on Prompt Following"})," \u2013 Compare different LLMs or fine-tuned versions on their ability to follow prompt instructions."]}),"\n"]}),"\n",(0,i.jsx)(t.h4,{id:"when-you-shouldnt-use-prompt-alignment-metric",children:"When you SHOULDN'T use Prompt Alignment Metric"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Measuring Factual Accuracy or Relevance"})," \u2013 This metric only evaluates instruction alignment, not correctness or coverage."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Reference-Based Validation"})," \u2013 Use metrics like Hallucination or Faithfulness for context-backed fact checking."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Evaluating Creative or Open-Ended Text"})," \u2013 Strict instruction enforcement may not be appropriate for creative or narrative tasks."]}),"\n"]}),"\n",(0,i.jsx)(t.h2,{id:"how-to-use",children:"How to use"}),"\n",(0,i.jsxs)(t.p,{children:["The Prompt Alignment Metric requires ",(0,i.jsx)(t.code,{children:"InitialInput"})," and ",(0,i.jsx)(t.code,{children:"ActualOutput"})," to function. You can instantiate an Prompt Alignment metric with optional parameters to customize its behavior."]}),"\n",(0,i.jsx)(t.p,{children:"Add Prompt Alignment Metric to your evaluator:"}),"\n",(0,i.jsxs)(t.table,{children:[(0,i.jsx)(t.thead,{children:(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.th,{children:"Method"}),(0,i.jsx)(t.th,{children:"Description"})]})}),(0,i.jsxs)(t.tbody,{children:[(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"AddPromptAlignment(List<string> promptInstructions, bool includeReason = true, bool strictMode = false, double threshold = 0.5)"})}),(0,i.jsx)(t.td,{children:"Creates the Prompt Alignment metric and adds it to the evaluator."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"AddPromptAlignment(PromptAlignmentMetricConfiguration config)"})}),(0,i.jsx)(t.td,{children:"Creates the Prompt Alignment metric and adds it to the evaluator."})]})]})]}),"\n",(0,i.jsx)(t.p,{children:"Here's an example of how to use Prompt Alignment metric:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-csharp",children:'// 1) Prepare your data\r\nvar cases = new[]\r\n{\r\n    new TType\r\n    {\r\n        UserInput    = "Summarize this medical report for a patient in plain English. Do not include any medical jargon.",\r\n        LLMOutput   = "The report says your heart is healthy and there are no signs of serious problems. Your blood pressure and cholesterol levels are normal.",\r\n        GroundTruth = "The report says your heart is healthy and there are no signs of serious problems. Your blood pressure and cholesterol levels are normal."\r\n    }\r\n};\r\n\r\n// 2) Create evaluator, mapping your case \u2192 EvaluatorTestData\r\nvar evaluator = Evaluator.FromData(\r\n    ChatClient.GetInstance(),\r\n    cases,\r\n    c => new EvaluatorTestData\r\n    {\r\n        InitialInput    = c.UserInput,\r\n        ActualOutput    = c.LLMOutput\r\n    }\r\n);\r\n\r\n// 3) Add metric and run\r\nevaluator.AddPromptAlignment(promptInstructions: ["Summarize for a patient", "Use plain English", "Avoid medical jargon"], includeReason: true);\r\nvar result = await evaluator.RunAsync();\n'})}),"\n",(0,i.jsx)(t.h3,{id:"required-data-fields",children:"Required Data Fields"}),"\n",(0,i.jsxs)(t.table,{children:[(0,i.jsx)(t.thead,{children:(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.th,{children:"Parameter"}),(0,i.jsx)(t.th,{children:"Description"})]})}),(0,i.jsxs)(t.tbody,{children:[(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"InitialInput"})}),(0,i.jsx)(t.td,{children:"A string That represents the initial input is the user interaction with the LLM."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"ActualOutput"})}),(0,i.jsx)(t.td,{children:"A string That represents the actual output of the test case from the LLM."})]})]})]}),"\n",(0,i.jsx)(t.h3,{id:"required-configuration-parameters",children:"Required Configuration Parameters"}),"\n",(0,i.jsxs)(t.table,{children:[(0,i.jsx)(t.thead,{children:(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.th,{children:"Parameter"}),(0,i.jsx)(t.th,{children:"Description"})]})}),(0,i.jsx)(t.tbody,{children:(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"PromptInstructions"})}),(0,i.jsx)(t.td,{children:"List of strings that represent instructions to validate against the model's response."})]})})]}),"\n",(0,i.jsx)(t.h3,{id:"optional-configuration-parameters",children:"Optional Configuration Parameters"}),"\n",(0,i.jsxs)(t.table,{children:[(0,i.jsx)(t.thead,{children:(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.th,{children:"Parameter"}),(0,i.jsx)(t.th,{children:"Description"})]})}),(0,i.jsxs)(t.tbody,{children:[(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"Threshold"})}),(0,i.jsx)(t.td,{children:"A float representing the minimum passing score, defaulting to 0.5."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"IncludeReason"})}),(0,i.jsxs)(t.td,{children:["A boolean that, when set to ",(0,i.jsx)(t.code,{children:"True"}),", provides a reason for the metric score. Default is ",(0,i.jsx)(t.code,{children:"True"}),"."]})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"StrictMode"})}),(0,i.jsxs)(t.td,{children:["Enforces a binary metric score\u20141 for perfect relevance, 0 otherwise\u2014setting the threshold to 1. Default is ",(0,i.jsx)(t.code,{children:"False"}),"."]})]})]})]})]})}function h(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,t,r)=>{r.d(t,{R:()=>o,x:()=>a});var n=r(6540);const i={},s=n.createContext(i);function o(e){const t=n.useContext(s);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),n.createElement(s.Provider,{value:t},e.children)}}}]);