"use strict";(self.webpackChunkdocs_src=self.webpackChunkdocs_src||[]).push([[323],{8453:(e,n,r)=>{r.d(n,{R:()=>o,x:()=>i});var t=r(6540);const a={},s=t.createContext(a);function o(e){const n=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),t.createElement(s.Provider,{value:n},e.children)}},9926:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>p,frontMatter:()=>o,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"test-cases","title":"Test Cases","description":"Loading Data into Evaluator","source":"@site/docs/test-cases.md","sourceDirName":".","slug":"/test-cases","permalink":"/DeepEvalSharpSite/docs/test-cases","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Introduction","permalink":"/DeepEvalSharpSite/docs/introduction"},"next":{"title":"Datasets","permalink":"/DeepEvalSharpSite/docs/datasets"}}');var a=r(4848),s=r(8453);const o={},i="Test Cases",l={},c=[{value:"Loading Data into Evaluator",id:"loading-data-into-evaluator",level:2},{value:"1. FromData (In-Memory Collection)",id:"1-fromdata-in-memory-collection",level:2},{value:"2. FromJson (Single JSON String)",id:"2-fromjson-single-json-string",level:2},{value:"3. FromJsonLines (NDJSON / JSON Lines)",id:"3-fromjsonlines-ndjson--json-lines",level:2},{value:"4. FromJsonFile (JSON File)",id:"4-fromjsonfile-json-file",level:2},{value:"5. FromCsv (CSV String)",id:"5-fromcsv-csv-string",level:2},{value:"6. FromCsvFile (CSV File)",id:"6-fromcsvfile-csv-file",level:2},{value:"Mapping Tips",id:"mapping-tips",level:2}];function d(e){const n={code:"code",em:"em",h1:"h1",h2:"h2",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"test-cases",children:"Test Cases"})}),"\n",(0,a.jsx)(n.h2,{id:"loading-data-into-evaluator",children:"Loading Data into Evaluator"}),"\n",(0,a.jsxs)(n.p,{children:["DeepEvalSharp\u2019s ",(0,a.jsx)(n.code,{children:"Evaluator"})," class provides several static methods to load datasets in various formats and wire them up to your evaluation pipeline. Below is a guide to each loader and how to define the mapping to ",(0,a.jsx)(n.code,{children:"EvaluatorTestData"}),"."]}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h2,{id:"1-fromdata-in-memory-collection",children:"1. FromData (In-Memory Collection)"}),"\n",(0,a.jsxs)(n.p,{children:["Use when you already have a collection of ",(0,a.jsx)(n.code,{children:"EvaluatorTestData"})," or another type that can be mapped directly."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-csharp",children:"// For EvaluatorTestData collection (no mapping needed)\r\nvar evaluator = Evaluator.FromData(chatClient, myTestDataList);\r\n\r\n// For custom DTOs, map to EvaluatorTestData\r\nvar evaluator2 = Evaluator.FromData<MyDTO>(\r\n    chatClient,\r\n    DTOList,\r\n    // Map each DTO to EvaluatorTestData\r\n    DTO => new EvaluatorTestData {\r\n        InitialInput    = DTO.Prompt,\r\n        ExpectedOutput  = DTO.Expected,\r\n        Context          = DTO.GoldContext,\r\n        RetrievalContext = DTO.RetrievedDocs\r\n    }\r\n);\n"})}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h2,{id:"2-fromjson-single-json-string",children:"2. FromJson (Single JSON String)"}),"\n",(0,a.jsx)(n.p,{children:"Deserialize a JSON array of objects into your type, then map."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-csharp",children:'string json = File.ReadAllText("test-cases.json");\r\nvar evaluator = Evaluator.FromJson<MyRecord>(\r\n    chatClient,\r\n    json,\r\n    record => new EvaluatorTestData {\r\n        InitialInput    = record.Question,\r\n        ExpectedOutput  = record.Answer,\r\n        Context          = record.ReferenceSnippets\r\n    }\r\n);\n'})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"jsonOptions"})," (optional): pass ",(0,a.jsx)(n.code,{children:"JsonSerializerOptions"})," for casing or custom converters."]}),"\n"]}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h2,{id:"3-fromjsonlines-ndjson--json-lines",children:"3. FromJsonLines (NDJSON / JSON Lines)"}),"\n",(0,a.jsx)(n.p,{children:"Load newline-delimited JSON (one object per line)."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-csharp",children:'IEnumerable<string> lines = File.ReadLines("ndjson.txt");\r\nvar evaluator = Evaluator.FromJsonLines<MyRecord>(\r\n    chatClient,\r\n    lines,\r\n    record => new EvaluatorTestData {\r\n        InitialInput    = record.Input,\r\n        ExpectedOutput  = record.Output\r\n    }\r\n);\n'})}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h2,{id:"4-fromjsonfile-json-file",children:"4. FromJsonFile (JSON File)"}),"\n",(0,a.jsx)(n.p,{children:"Shortcut to read and parse a JSON file in one call."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-csharp",children:'var evaluator = Evaluator.FromJsonFile<MyRecord>(\r\n    chatClient,\r\n    filePath: "data/test-cases.json",\r\n    map: record => new EvaluatorTestData {\r\n        InitialInput   = record.Query,\r\n        ExpectedOutput = record.Result\r\n    }\r\n);\n'})}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h2,{id:"5-fromcsv-csv-string",children:"5. FromCsv (CSV String)"}),"\n",(0,a.jsx)(n.p,{children:"Parse CSV text into your DTO, then map."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-csharp",children:'string csv = File.ReadAllText("cases.csv");\r\nvar evaluator = Evaluator.FromCsv<MyCsvModel>(\r\n    chatClient,\r\n    csv,\r\n    csvModel => new EvaluatorTestData {\r\n        InitialInput   = csvModel.Prompt,\r\n        ExpectedOutput = csvModel.Expected\r\n    },\r\n    config: new CsvHelper.Configuration.CsvConfiguration(CultureInfo.InvariantCulture)\r\n);\n'})}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h2,{id:"6-fromcsvfile-csv-file",children:"6. FromCsvFile (CSV File)"}),"\n",(0,a.jsx)(n.p,{children:"Load and parse a CSV file directly."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-csharp",children:'var evaluator = Evaluator.FromCsvFile<MyCsvModel>(\r\n    chatClient,\r\n    filePath: "cases.csv",\r\n    map: csvModel => new EvaluatorTestData {\r\n        InitialInput   = csvModel.Question,\r\n        ExpectedOutput = csvModel.Answer,\r\n        Context         = csvModel.GoldContext.Split("|").ToList()\r\n    }\r\n);\n'})}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h2,{id:"mapping-tips",children:"Mapping Tips"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsxs)(n.strong,{children:["Type parameter ",(0,a.jsx)(n.code,{children:"T"})]})," can be ",(0,a.jsx)(n.code,{children:"EvaluatorTestData"})," itself, in which case your map expression can be ",(0,a.jsx)(n.code,{children:"c => c"}),"."]}),"\n",(0,a.jsxs)(n.li,{children:["Use C# 9 ",(0,a.jsx)(n.strong,{children:"record types"})," or ",(0,a.jsx)(n.strong,{children:"DTO classes"})," with properties matching your file schema."]}),"\n",(0,a.jsxs)(n.li,{children:["If your data type already ",(0,a.jsx)(n.em,{children:"is"})," ",(0,a.jsx)(n.code,{children:"EvaluatorTestData"}),", prefer ",(0,a.jsx)(n.code,{children:"FromData(chatClient, data)"})," to skip mapping."]}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"With these loaders, you can seamlessly plug in any data source\u2014JSON, CSV, or in-memory collections\u2014into DeepEvalSharp\u2019s evaluation engine."})]})}function p(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}}}]);