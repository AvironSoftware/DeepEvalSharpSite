"use strict";(self.webpackChunkdocs_src=self.webpackChunkdocs_src||[]).push([[590],{8453:(e,t,r)=>{r.d(t,{R:()=>s,x:()=>a});var n=r(6540);const c={},i=n.createContext(c);function s(e){const t=n.useContext(i);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(c):e.components||c:s(e.components),n.createElement(i.Provider,{value:t},e.children)}},9540:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>o,contentTitle:()=>a,default:()=>d,frontMatter:()=>s,metadata:()=>n,toc:()=>l});const n=JSON.parse('{"id":"metrics/MatchMetric","title":"Match Metric","description":"The Match Metric evaluates whether an LLM-generated ActualOutput correctly matches the ExpectedOutput according to configurable matching rules. This metric provides flexible options for exact matching, regex-based matching, or matching output that follows the occurrence of a specific string.","source":"@site/docs/metrics/MatchMetric.md","sourceDirName":"metrics","slug":"/metrics/MatchMetric","permalink":"/EvalSharpSite/docs/metrics/MatchMetric","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Hallucination Metric","permalink":"/EvalSharpSite/docs/metrics/HallucinationMetric"},"next":{"title":"Prompt Alignment Metric","permalink":"/EvalSharpSite/docs/metrics/PromptAlignmentMetric"}}');var c=r(4848),i=r(8453);const s={},a="Match Metric",o={},l=[{value:"When you should use Match Metric",id:"when-you-should-use-match-metric",level:4},{value:"When you SHOULDN&#39;T use Match Metric",id:"when-you-shouldnt-use-match-metric",level:4},{value:"How to use",id:"how-to-use",level:2},{value:"Required Data Fields",id:"required-data-fields",level:3}];function h(e){const t={code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.R)(),...e.components};return(0,c.jsxs)(c.Fragment,{children:[(0,c.jsx)(t.header,{children:(0,c.jsx)(t.h1,{id:"match-metric",children:"Match Metric"})}),"\n",(0,c.jsxs)(t.p,{children:["The Match Metric evaluates whether an LLM-generated ",(0,c.jsx)(t.code,{children:"ActualOutput"})," correctly matches the ",(0,c.jsx)(t.code,{children:"ExpectedOutput"})," according to configurable matching rules. This metric provides flexible options for exact matching, regex-based matching, or matching output that follows the occurrence of a specific string."]}),"\n",(0,c.jsx)(t.h4,{id:"when-you-should-use-match-metric",children:"When you should use Match Metric"}),"\n",(0,c.jsxs)(t.ul,{children:["\n",(0,c.jsxs)(t.li,{children:[(0,c.jsx)(t.strong,{children:"Validating Exact Output"})," \u2013 Ensure the LLM's output exactly matches the expected string, useful for precise tasks like tool calls or structured responses."]}),"\n",(0,c.jsxs)(t.li,{children:[(0,c.jsx)(t.strong,{children:"Regex Pattern Matching"})," \u2013 When output may vary in format but should conform to a defined regex pattern."]}),"\n",(0,c.jsxs)(t.li,{children:[(0,c.jsx)(t.strong,{children:"Matching Output After a Specific String"})," \u2013 For scenarios where only content following a particular phrase is evaluated."]}),"\n"]}),"\n",(0,c.jsx)(t.h4,{id:"when-you-shouldnt-use-match-metric",children:"When you SHOULDN'T use Match Metric"}),"\n",(0,c.jsxs)(t.ul,{children:["\n",(0,c.jsxs)(t.li,{children:[(0,c.jsx)(t.strong,{children:"Subjective or Open-Ended Responses"})," \u2013 If outputs are exploratory or open to interpretation, strict matching may be inappropriate."]}),"\n",(0,c.jsxs)(t.li,{children:[(0,c.jsx)(t.strong,{children:"Evaluating Fluency or Relevance"})," \u2013 For language quality or contextual relevance, other metrics like Answer Relevancy or Contextual Precision are more suitable."]}),"\n",(0,c.jsxs)(t.li,{children:[(0,c.jsx)(t.strong,{children:"Overly Complex Output Logic"})," \u2013 If determining correctness requires more than string matching or simple pattern checks, consider a custom metric."]}),"\n"]}),"\n",(0,c.jsx)(t.h2,{id:"how-to-use",children:"How to use"}),"\n",(0,c.jsxs)(t.p,{children:["The Match Metric compares the ",(0,c.jsx)(t.code,{children:"ExpectedOutput"})," and ",(0,c.jsx)(t.code,{children:"ActualOutput"})," using your preferred matching mode. You can configure it for exact matches, regex patterns, or output after a specific string occurrence."]}),"\n",(0,c.jsx)(t.p,{children:"Add Match Metric to your evaluator:"}),"\n",(0,c.jsxs)(t.table,{children:[(0,c.jsx)(t.thead,{children:(0,c.jsxs)(t.tr,{children:[(0,c.jsx)(t.th,{children:"Method"}),(0,c.jsx)(t.th,{children:"Description"})]})}),(0,c.jsxs)(t.tbody,{children:[(0,c.jsxs)(t.tr,{children:[(0,c.jsx)(t.td,{children:(0,c.jsx)(t.code,{children:"AddExactMatchMetric()"})}),(0,c.jsx)(t.td,{children:"Creates a Match Metric configured for strict exact matching."})]}),(0,c.jsxs)(t.tr,{children:[(0,c.jsx)(t.td,{children:(0,c.jsx)(t.code,{children:"AddRegexMatchMetric(string matchRegexString, StringComparison? stringComparisonForAnswer = null)"})}),(0,c.jsx)(t.td,{children:"Creates a Match Metric configured for regex-based matching."})]}),(0,c.jsxs)(t.tr,{children:[(0,c.jsx)(t.td,{children:(0,c.jsx)(t.code,{children:"AddAfterStringMatchMetric(string searchString)"})}),(0,c.jsx)(t.td,{children:"Creates a Match Metric for evaluating output after a given string."})]})]})]}),"\n",(0,c.jsx)(t.p,{children:"Here's an example of how to use the Match Metric:"}),"\n",(0,c.jsx)(t.pre,{children:(0,c.jsx)(t.code,{className:"language-csharp",children:'// 1) Prepare your data\r\nvar cases = new[]\r\n{\r\n    new TType\r\n    {\r\n        ExpectedOutput = "Paris",\r\n        LLMOutput      = "Well, hello there!"\r\n    }\r\n};\r\n\r\n// 2) Create evaluator, mapping your case \u2192 EvaluatorTestData\r\nvar evaluator = Evaluator.FromData(\r\n    null!,\r\n    cases,\r\n    c => new EvaluatorTestData\r\n    {\r\n        ExpectedOutput = c.ExpectedOutput,\r\n        ActualOutput   = c.LLMOutput\r\n    }\r\n);\r\n\r\n// 3) Add metric and run\r\nevaluator.AddRegexMatchMetric(@"\\bhello\\b", StringComparison.InvariantCultureIgnoreCase);\r\nvar result = await evaluator.RunAsync();\n'})}),"\n",(0,c.jsx)(t.h3,{id:"required-data-fields",children:"Required Data Fields"}),"\n",(0,c.jsxs)(t.table,{children:[(0,c.jsx)(t.thead,{children:(0,c.jsxs)(t.tr,{children:[(0,c.jsx)(t.th,{children:"Parameter"}),(0,c.jsx)(t.th,{children:"Description"})]})}),(0,c.jsxs)(t.tbody,{children:[(0,c.jsxs)(t.tr,{children:[(0,c.jsx)(t.td,{children:(0,c.jsx)(t.code,{children:"ExpectedOutput"})}),(0,c.jsx)(t.td,{children:"The string representing the ideal or correct output for the test case."})]}),(0,c.jsxs)(t.tr,{children:[(0,c.jsx)(t.td,{children:(0,c.jsx)(t.code,{children:"ActualOutput"})}),(0,c.jsx)(t.td,{children:"The string representing the actual LLM-generated output being evaluated."})]})]})]})]})}function d(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,c.jsx)(t,{...e,children:(0,c.jsx)(h,{...e})}):h(e)}}}]);